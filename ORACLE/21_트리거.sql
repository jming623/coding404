/*
트리거(TRIGGER)
트리거는 테이블에 부착해서 사용하는 형태로 INSERT, DELETE, UPDATE작업이 수행될때
특정 코드가 동작하도록 하는 구문입니다.

트리거 종류
AFTER - DML문 직후에 동작하는 트리거
BEFORE - DML문 이전에 동작하는 트리거
INSTEAD OF - 뷰에 부착하는 트리거 

트리거 형태
CREATE OR REPLACE TRIGGER 트리거명
    트리거타입
    ON 부착시킬 테이블
    OPTION(FOR EACH ROW) --옵션이긴하지만 거의 무조건 붙힌다고 생각하면 됨.
    BEGIN
    END;
*/

CREATE TABLE TBL_TEST(
    ID VARCHAR2(10),
    TEXT VARCHAR2(50)
);

CREATE OR REPLACE TRIGGER TBL_TEST_TRI
    AFTER DELETE OR UPDATE -- 삭제 OR 업데이트 이후에 동작
    ON TBL_TEST -- 부착할 테이블
    FOR EACH ROW --모든행에 적용하는 OPTION
BEGIN
    DBMS_OUTPUT.PUT_LINE('트리거가 동작함');
END;

--트리거 동작 확인

--INSERT구문에서는 동작하지 않음
INSERT INTO TBL_TEST VALUES (1,'홍길동');
INSERT INTO TBL_TEST VALUES (2,'이순신');
--UPDATE구문과 DELETE구문에서는 트리거가 동작하며 출력문이 출력됨.
UPDATE TBL_TEST SET TEXT = '홍길자' WHERE ID = 1;
DELETE FROM TBL_TEST WHERE ID = 2;

/*
트리거 변수참조 키워드
:OLD - 참조전 COLUMN 값 (INSERT:입력전 자료, UPDATE:수정전 자료 , DELETE:삭제전 자료)
:NEW - 참조후 COLUMN 값 (INSERT:입력후 자료, UPDATE:수정후 자료)

UPDATE OR DELETE를 시도하면 기존자료를 백업테이블에 보관할때 사용

AFTER트리거는 보통 UPDATE,DELETE사용(:OLD, :NEW)
BEFORE트리거는 보통 INSERT사용 (:NEW)
*/

CREATE TABLE TBL_USER(
    ID VARCHAR2(30) PRIMARY KEY,
    NAME VARCHAR2(30)
);

CREATE TABLE TBL_USER_BACKUP(
    ID VARCHAR2(30),
    NAME VARCHAR2(30),
    UPDATE_DATE DATE DEFAULT SYSDATE,--변경날짜
    MODIFY_TYPE CHAR(1), --변경OR삭제 타입
    MODIFY_USER VARCHAR2(30) --변경한 사람
);
DROP TABLE TBL_USER_BACKUP;
--AFTER트리거
CREATE OR REPLACE TRIGGER USER_BACKUP_TRI
    AFTER UPDATE OR DELETE
    ON TBL_USER
    FOR EACH ROW
DECLARE --지역변수의 선언이 필요하다면 DECLARE구문을 추가하고 선언가능
    V_TYPE VARCHAR2(10); --트리거에서 사용할 변수
BEGIN
    --INSERTING, UPDATING, DELETING 트리거에서 지원하는 조건검사 키워드?
    IF UPDATING THEN --UPDATE됐을때 실행됨
        V_TYPE := 'U';
    ELSIF DELETING THEN --DELETE됐을때 실행됨
        V_TYPE := 'D';
    END IF;

    --BACKUP테이블에 동작할 기능
    INSERT INTO TBL_USER_BACKUP VALUES(:OLD.ID,:OLD.NAME,SYSDATE,V_TYPE,USER()); --USER()는 현재계정명이 들어감.
END;

--트리거 확인
INSERT INTO TBL_USER VALUES('TEST1', 'ADMIN1');
INSERT INTO TBL_USER VALUES('TEST2', 'ADMIN2');
INSERT INTO TBL_USER VALUES('TEST3', 'ADMIN3');

UPDATE TBL_USER SET NAME = '홍길동' WHERE ID = 'TEST1';--트리거 동작
DELETE FROM TBL_USER WHERE ID = 'TEST3';

SELECT * FROM TBL_USER;
SELECT * FROM TBL_USER_BACKUP;

---------------------------------------------------------------------
--BEFORE트리거
--TBL_USER테이블에 이름이 저장될 때, **를 붙여서 저장

CREATE OR REPLACE TRIGGER USER_INSERT_TRI
    BEFORE  INSERT 
    ON TBL_USER
    FOR EACH ROW
DECLARE

BEGIN
-- INSERT에서 :OLD는 전부 NULL
    :NEW.NAME := SUBSTR(:NEW.NAME,1,1)||'***'   ;
    DBMS_OUTPUT.PUT_LINE(:NEW.NAME);
END;

SELECT * FROM TBL_USER;
DELETE FROM TBL_USER WHERE ID ='KKK123';
--트리거 동작
INSERT INTO TBL_USER VALUES ('KKK123','홍길동');
INSERT INTO TBL_USER VALUES ('PPP123','이순신');
INSERT INTO TBL_USER VALUES ('QQQ123','신사임당');

--트리거 응용편
/*
주문테이블 생략
주문기록 테이블: 주문번호 50000번

*/
CREATE TABLE ORDER_DETAIL(
    DETAIL_NO NUMBER(5) PRIMARY KEY,
    O_NO NUMBER(5), --FK(주문번호)
    P_NO NUMBER(5), --FK(상품번호)
    DETAIL_TOTAL NUMBER(5), --주문수량
    DETAIL_PRICE NUMBER(10) --금액
);

CREATE TABLE PRODUCT(
    P_NO NUMBER(5) PRIMARY KEY,
    P_NAME VARCHAR2(20),
    P_TOTAL NUMBER(5), --남은수량
    P_PRICE NUMBER(10) --가격
);
SELECT * FROM PRODUCT;
SELECT * FROM ORDER_DETAIL;

INSERT INTO PRODUCT (P_NO,P_NAME,P_TOTAL,P_PRICE)VALUES(1,'피자',100,10000);
INSERT INTO PRODUCT (P_NO,P_NAME,P_TOTAL,P_PRICE)VALUES(2,'치킨',100,15000);
INSERT INTO PRODUCT (P_NO,P_NAME,P_TOTAL,P_PRICE)VALUES(3,'햄버거',100,5000);

--주문이 들어오면, 상품테이블의 수량 감소 트리거
CREATE OR REPLACE TRIGGER ORDER_DETAIL_TRI
    AFTER INSERT
    ON ORDER_DETAIL
    FOR EACH ROW
DECLARE
    V_NO NUMBER(5) := :NEW.P_NO;
    V_DETAIL_TOTAL NUMBER(5) := :NEW.DETAIL_TOTAL; --주문에 들어오는 수량
BEGIN
    --상품테이블에 적용될 UPDATE문
    UPDATE PRODUCT SET P_TOTAL = (P_TOTAL - V_DETAIL_TOTAL) WHERE P_NO = V_NO;

END;
--트리거 동작확인 (EX:50000번 주문에 대하여..)
INSERT INTO ORDER_DETAIL VALUES(1,50000,1,5,(SELECT P_PRICE FROM PRODUCT WHERE P_NO = 1)*5 ); 
INSERT INTO ORDER_DETAIL VALUES(2,50000,2,2,(SELECT P_PRICE FROM PRODUCT WHERE P_NO = 2)*2 ); 
INSERT INTO ORDER_DETAIL VALUES(3,50000,3,10,(SELECT P_PRICE FROM PRODUCT WHERE P_NO = 3)*10 ); 

